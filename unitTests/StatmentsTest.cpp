#include <gtest/gtest.h>
#include <structures/Statements.h>

using namespace Vera::Structures;


class StatementsTest : public ::testing::Test
{
  protected:

    /**
     * @brief It will be called before each test is run.
     */
    virtual void SetUp()
    {
      collection_.push_back(Token("//\n", 1, 0, "cppcomment"));
      collection_.push_back(Token("// Copyright (C) 2006-2007 Maciej Sobczak\n", 2, 0, "cppcomment"));
      collection_.push_back(Token("// Distributed under the Boost Software License, Version 1.0.\n", 3, 0, "cppcomment"));
      collection_.push_back(Token("// (See accompanying file LICENSE_1_0.txt or copy at\n", 4, 0, "cppcomment"));
      collection_.push_back(Token("// http://www.boost.org/LICENSE_1_0.txt)\n", 5, 0, "cppcomment"));
      collection_.push_back(Token("//\n", 6, 0, "cppcomment"));
      collection_.push_back(Token("#define", 7, 0, "pp_define"));
      collection_.push_back(Token(" ", 7, 7, "space"));
      collection_.push_back(Token("VERA_LEGACY", 7, 8, "identifier"));
      collection_.push_back(Token(" ", 7, 19, "space"));
      collection_.push_back(Token("\"VERA_LEGACY\"", 7, 20, "stringlit"));
      collection_.push_back(Token("\n", 7, 6, "newline"));
      collection_.push_back(Token("\n", 8, 0, "newline"));
      collection_.push_back(Token("#include <cstdlib>", 9, 0, "pp_hheader"));
      collection_.push_back(Token("\n", 9, 18, "newline"));
      collection_.push_back(Token("#include <string>", 10, 0, "pp_hheader"));
      collection_.push_back(Token("\n", 10, 17, "newline"));
      collection_.push_back(Token("#include <boost/algorithm/string.hpp>", 11, 0, "pp_hheader"));
      collection_.push_back(Token("\n", 11, 37, "newline"));
      collection_.push_back(Token("\n", 12, 0, "newline"));
      collection_.push_back(Token("int", 13, 0, "int"));
      collection_.push_back(Token(" ", 13, 3, "space"));
      collection_.push_back(Token("legacy_main", 13, 4, "identifier"));
      collection_.push_back(Token("(", 13, 15, "leftparen"));
      collection_.push_back(Token("int", 13, 16, "int"));
      collection_.push_back(Token(" ", 13, 19, "space"));
      collection_.push_back(Token("argc", 13, 20, "identifier"));
      collection_.push_back(Token(",", 13, 24, "comma"));
      collection_.push_back(Token(" ", 13, 25, "space"));
      collection_.push_back(Token("char", 13, 26, "char"));
      collection_.push_back(Token(" ", 13, 30, "space"));
      collection_.push_back(Token("*", 13, 31, "star"));
      collection_.push_back(Token(" ", 13, 32, "space"));
      collection_.push_back(Token("argv", 13, 33, "identifier"));
      collection_.push_back(Token("[", 13, 37, "leftbracket"));
      collection_.push_back(Token("]", 13, 38, "rightbracket"));
      collection_.push_back(Token(",", 13, 39, "comma"));
      collection_.push_back(Token(" ", 13, 40, "space"));
      collection_.push_back(Token("bool", 13, 41, "bool"));
      collection_.push_back(Token(" ", 13, 45, "space"));
      collection_.push_back(Token("silent", 13, 46, "identifier"));
      collection_.push_back(Token(" ", 13, 52, "space"));
      collection_.push_back(Token("=", 13, 53, "assign"));
      collection_.push_back(Token(" ", 13, 54, "space"));
      collection_.push_back(Token("false", 13, 55, "false"));
      collection_.push_back(Token(")", 13, 60, "rightparen"));
      collection_.push_back(Token(";", 13, 61, "semicolon"));
      collection_.push_back(Token("\n", 13, 62, "newline"));
      collection_.push_back(Token("\n", 14, 0, "newline"));
      collection_.push_back(Token("int", 15, 0, "int"));
      collection_.push_back(Token(" ", 15, 3, "space"));
      collection_.push_back(Token("boost_main", 15, 4, "identifier"));
      collection_.push_back(Token("(", 15, 14, "leftparen"));
      collection_.push_back(Token("int", 15, 15, "int"));
      collection_.push_back(Token(" ", 15, 18, "space"));
      collection_.push_back(Token("argc", 15, 19, "identifier"));
      collection_.push_back(Token(",", 15, 23, "comma"));
      collection_.push_back(Token(" ", 15, 24, "space"));
      collection_.push_back(Token("char", 15, 25, "char"));
      collection_.push_back(Token(" ", 15, 29, "space"));
      collection_.push_back(Token("*", 15, 30, "star"));
      collection_.push_back(Token(" ", 15, 31, "space"));
      collection_.push_back(Token("argv", 15, 32, "identifier"));
      collection_.push_back(Token("[", 15, 36, "leftbracket"));
      collection_.push_back(Token("]", 15, 37, "rightbracket"));
      collection_.push_back(Token(")", 15, 38, "rightparen"));
      collection_.push_back(Token(";", 15, 39, "semicolon"));
      collection_.push_back(Token("\n", 15, 40, "newline"));
      collection_.push_back(Token("\n", 16, 0, "newline"));
      collection_.push_back(Token("int", 17, 0, "int"));
      collection_.push_back(Token(" ", 17, 3, "space"));
      collection_.push_back(Token("main", 17, 4, "identifier"));
      collection_.push_back(Token("(", 17, 8, "leftparen"));
      collection_.push_back(Token("int", 17, 9, "int"));
      collection_.push_back(Token(" ", 17, 12, "space"));
      collection_.push_back(Token("argc", 17, 13, "identifier"));
      collection_.push_back(Token(",", 17, 17, "comma"));
      collection_.push_back(Token(" ", 17, 18, "space"));
      collection_.push_back(Token("char", 17, 19, "char"));
      collection_.push_back(Token(" ", 17, 23, "space"));
      collection_.push_back(Token("*", 17, 24, "star"));
      collection_.push_back(Token(" ", 17, 25, "space"));
      collection_.push_back(Token("argv", 17, 26, "identifier"));
      collection_.push_back(Token("[", 17, 30, "leftbracket"));
      collection_.push_back(Token("]", 17, 31, "rightbracket"));
      collection_.push_back(Token(")", 17, 32, "rightparen"));
      collection_.push_back(Token("\n", 17, 33, "newline"));
      collection_.push_back(Token("{", 18, 0, "leftbrace"));
      collection_.push_back(Token("\n", 18, 1, "newline"));
      collection_.push_back(Token("    ", 19, 0, "space"));
      collection_.push_back(Token("char", 19, 4, "char"));
      collection_.push_back(Token(" ", 19, 8, "space"));
      collection_.push_back(Token("*", 19, 9, "star"));
      collection_.push_back(Token(" ", 19, 10, "space"));
      collection_.push_back(Token("veraLegacyEnv", 19, 11, "identifier"));
      collection_.push_back(Token(" ", 19, 24, "space"));
      collection_.push_back(Token("=", 19, 25, "assign"));
      collection_.push_back(Token(" ", 19, 26, "space"));
      collection_.push_back(Token("getenv", 19, 27, "identifier"));
      collection_.push_back(Token("(", 19, 33, "leftparen"));
      collection_.push_back(Token("\"VERA_LEGACY\"", 19, 34, "stringlit"));
      collection_.push_back(Token(")", 19, 47, "rightparen"));
      collection_.push_back(Token(";", 19, 48, "semicolon"));
      collection_.push_back(Token("\n", 19, 49, "newline"));
      collection_.push_back(Token("    ", 20, 0, "space"));
      collection_.push_back(Token("if", 20, 4, "if"));
      collection_.push_back(Token(" ", 20, 6, "space"));
      collection_.push_back(Token("(", 20, 7, "leftparen"));
      collection_.push_back(Token("veraLegacyEnv", 20, 8, "identifier"));
      collection_.push_back(Token(" ", 20, 21, "space"));
      collection_.push_back(Token("!=", 20, 22, "notequal"));
      collection_.push_back(Token(" ", 20, 24, "space"));
      collection_.push_back(Token("NULL", 20, 25, "identifier"));
      collection_.push_back(Token(")", 20, 29, "rightparen"));
      collection_.push_back(Token("\n", 20, 30, "newline"));
      collection_.push_back(Token("    ", 21, 0, "space"));
      collection_.push_back(Token("{", 21, 4, "leftbrace"));
      collection_.push_back(Token("\n", 21, 5, "newline"));
      collection_.push_back(Token("        ", 22, 0, "space"));
      collection_.push_back(Token("std", 22, 8, "identifier"));
      collection_.push_back(Token("::", 22, 11, "colon_colon"));
      collection_.push_back(Token("string", 22, 13, "identifier"));
      collection_.push_back(Token(" ", 22, 19, "space"));
      collection_.push_back(Token("legacy", 22, 20, "identifier"));
      collection_.push_back(Token(" ", 22, 26, "space"));
      collection_.push_back(Token("=", 22, 27, "assign"));
      collection_.push_back(Token(" ", 22, 28, "space"));
      collection_.push_back(Token("veraLegacyEnv", 22, 29, "identifier"));
      collection_.push_back(Token(";", 22, 42, "semicolon"));
      collection_.push_back(Token("\n", 22, 43, "newline"));
      collection_.push_back(Token("        ", 23, 0, "space"));
      collection_.push_back(Token("boost", 23, 8, "identifier"));
      collection_.push_back(Token("::", 23, 13, "colon_colon"));
      collection_.push_back(Token("to_lower", 23, 15, "identifier"));
      collection_.push_back(Token("(", 23, 23, "leftparen"));
      collection_.push_back(Token("legacy", 23, 24, "identifier"));
      collection_.push_back(Token(")", 23, 30, "rightparen"));
      collection_.push_back(Token(";", 23, 31, "semicolon"));
      collection_.push_back(Token("\n", 23, 32, "newline"));
      collection_.push_back(Token("        ", 24, 0, "space"));
      collection_.push_back(Token("if", 24, 8, "if"));
      collection_.push_back(Token(" ", 24, 10, "space"));
      collection_.push_back(Token("(", 24, 11, "leftparen"));
      collection_.push_back(Token("legacy", 24, 12, "identifier"));
      collection_.push_back(Token(" ", 24, 18, "space"));
      collection_.push_back(Token("==", 24, 19, "equal"));
      collection_.push_back(Token(" ", 24, 21, "space"));
      collection_.push_back(Token("\"yes\"", 24, 22, "stringlit"));
      collection_.push_back(Token(" ", 24, 27, "space"));
      collection_.push_back(Token("||", 24, 28, "oror"));
      collection_.push_back(Token(" ", 24, 30, "space"));
      collection_.push_back(Token("legacy", 24, 31, "identifier"));
      collection_.push_back(Token(" ", 24, 37, "space"));
      collection_.push_back(Token("==", 24, 38, "equal"));
      collection_.push_back(Token(" ", 24, 40, "space"));
      collection_.push_back(Token("\"on\"", 24, 41, "stringlit"));
      collection_.push_back(Token(" ", 24, 45, "space"));
      collection_.push_back(Token("||", 24, 46, "oror"));
      collection_.push_back(Token(" ", 24, 48, "space"));
      collection_.push_back(Token("legacy", 24, 49, "identifier"));
      collection_.push_back(Token(" ", 24, 55, "space"));
      collection_.push_back(Token("==", 24, 56, "equal"));
      collection_.push_back(Token(" ", 24, 58, "space"));
      collection_.push_back(Token("\"1\"", 24, 59, "stringlit"));
      collection_.push_back(Token(")", 24, 62, "rightparen"));
      collection_.push_back(Token("\n", 24, 63, "newline"));
      collection_.push_back(Token("        ", 25, 0, "space"));
      collection_.push_back(Token("{", 25, 8, "leftbrace"));
      collection_.push_back(Token("\n", 25, 9, "newline"));
      collection_.push_back(Token("            ", 26, 0, "space"));
      collection_.push_back(Token("// use the legacy main, and nothing else\n", 26, 12, "cppcomment"));
      collection_.push_back(Token("            ", 27, 0, "space"));
      collection_.push_back(Token("return", 27, 12, "return"));
      collection_.push_back(Token(" ", 27, 18, "space"));
      collection_.push_back(Token("legacy_main", 27, 19, "identifier"));
      collection_.push_back(Token("(", 27, 30, "leftparen"));
      collection_.push_back(Token("argc", 27, 31, "identifier"));
      collection_.push_back(Token(",", 27, 35, "comma"));
      collection_.push_back(Token(" ", 27, 36, "space"));
      collection_.push_back(Token("argv", 27, 37, "identifier"));
      collection_.push_back(Token(")", 27, 41, "rightparen"));
      collection_.push_back(Token(";", 27, 42, "semicolon"));
      collection_.push_back(Token("\n", 27, 43, "newline"));
      collection_.push_back(Token("        ", 28, 0, "space"));
      collection_.push_back(Token("}", 28, 8, "rightbrace"));
      collection_.push_back(Token("\n", 28, 9, "newline"));
      collection_.push_back(Token("        ", 29, 0, "space"));
      collection_.push_back(Token("// use the boost main and nothing else\n", 29, 8, "cppcomment"));
      collection_.push_back(Token("        ", 30, 0, "space"));
      collection_.push_back(Token("return", 30, 8, "return"));
      collection_.push_back(Token(" ", 30, 14, "space"));
      collection_.push_back(Token("boost_main", 30, 15, "identifier"));
      collection_.push_back(Token("(", 30, 25, "leftparen"));
      collection_.push_back(Token("argc", 30, 26, "identifier"));
      collection_.push_back(Token(",", 30, 30, "comma"));
      collection_.push_back(Token(" ", 30, 31, "space"));
      collection_.push_back(Token("argv", 30, 32, "identifier"));
      collection_.push_back(Token(")", 30, 36, "rightparen"));
      collection_.push_back(Token(";", 30, 37, "semicolon"));
      collection_.push_back(Token("\n", 30, 38, "newline"));
      collection_.push_back(Token("    ", 31, 0, "space"));
      collection_.push_back(Token("}", 31, 4, "rightbrace"));
      collection_.push_back(Token("\n", 31, 5, "newline"));
      collection_.push_back(Token("\n", 32, 5, "newline"));
      collection_.push_back(Token("\n", 33, 5, "newline"));
      collection_.push_back(Token("    ", 34, 0, "space"));
      collection_.push_back(Token("int", 34, 4, "int"));
      collection_.push_back(Token(" ", 34, 7, "space"));
      collection_.push_back(Token("i", 34, 8, "identifier"));
      collection_.push_back(Token(" ", 34, 9, "space"));
      collection_.push_back(Token("=", 34, 10, "assign"));
      collection_.push_back(Token(" ", 34, 11, "space"));
      collection_.push_back(Token("1", 34, 12, "intlit"));
      collection_.push_back(Token(";", 34, 13, "semicolon"));
      collection_.push_back(Token("\n", 34, 14, "newline"));
      collection_.push_back(Token("    ", 35, 0, "space"));
      collection_.push_back(Token("bool", 35, 4, "bool"));
      collection_.push_back(Token(" ", 35, 8, "space"));
      collection_.push_back(Token("useLegacy", 35, 9, "identifier"));
      collection_.push_back(Token(" ", 35, 18, "space"));
      collection_.push_back(Token("=", 35, 19, "assign"));
      collection_.push_back(Token(" ", 35, 20, "space"));
      collection_.push_back(Token("false", 35, 21, "false"));
      collection_.push_back(Token(";", 35, 26, "semicolon"));
      collection_.push_back(Token("\n", 35, 27, "newline"));
      collection_.push_back(Token("    ", 36, 0, "space"));
      collection_.push_back(Token("while", 36, 4, "while"));
      collection_.push_back(Token(" ", 36, 9, "space"));
      collection_.push_back(Token("(", 36, 10, "leftparen"));
      collection_.push_back(Token("i", 36, 11, "identifier"));
      collection_.push_back(Token(" ", 36, 12, "space"));
      collection_.push_back(Token("!=", 36, 13, "notequal"));
      collection_.push_back(Token(" ", 36, 15, "space"));
      collection_.push_back(Token("argc", 36, 16, "identifier"));
      collection_.push_back(Token(")", 36, 20, "rightparen"));
      collection_.push_back(Token("\n", 36, 21, "newline"));
      collection_.push_back(Token("    ", 37, 0, "space"));
      collection_.push_back(Token("{", 37, 4, "leftbrace"));
      collection_.push_back(Token("\n", 37, 5, "newline"));
      collection_.push_back(Token("        ", 38, 0, "space"));
      collection_.push_back(Token("const", 38, 8, "const"));
      collection_.push_back(Token(" ", 38, 13, "space"));
      collection_.push_back(Token("std", 38, 14, "identifier"));
      collection_.push_back(Token("::", 38, 17, "colon_colon"));
      collection_.push_back(Token("string", 38, 19, "identifier"));
      collection_.push_back(Token(" ", 38, 25, "space"));
      collection_.push_back(Token("arg", 38, 26, "identifier"));
      collection_.push_back(Token("(", 38, 29, "leftparen"));
      collection_.push_back(Token("argv", 38, 30, "identifier"));
      collection_.push_back(Token("[", 38, 34, "leftbracket"));
      collection_.push_back(Token("i", 38, 35, "identifier"));
      collection_.push_back(Token("]", 38, 36, "rightbracket"));
      collection_.push_back(Token(")", 38, 37, "rightparen"));
      collection_.push_back(Token(";", 38, 38, "semicolon"));
      collection_.push_back(Token("\n", 38, 39, "newline"));
      collection_.push_back(Token("        ", 39, 0, "space"));
      collection_.push_back(Token("if", 39, 8, "if"));
      collection_.push_back(Token(" ", 39, 10, "space"));
      collection_.push_back(Token("(", 39, 11, "leftparen"));
      collection_.push_back(Token("arg", 39, 12, "identifier"));
      collection_.push_back(Token(" ", 39, 15, "space"));
      collection_.push_back(Token("==", 39, 16, "equal"));
      collection_.push_back(Token(" ", 39, 18, "space"));
      collection_.push_back(Token("\"-version\"", 39, 19, "stringlit"));
      collection_.push_back(Token("\n", 39, 29, "newline"));
      collection_.push_back(Token("            ", 40, 0, "space"));
      collection_.push_back(Token("||", 40, 12, "oror"));
      collection_.push_back(Token(" ", 40, 14, "space"));
      collection_.push_back(Token("arg", 40, 15, "identifier"));
      collection_.push_back(Token(" ", 40, 18, "space"));
      collection_.push_back(Token("==", 40, 19, "equal"));
      collection_.push_back(Token(" ", 40, 21, "space"));
      collection_.push_back(Token("\"-help\"", 40, 22, "stringlit"));
      collection_.push_back(Token("\n", 40, 29, "newline"));
      collection_.push_back(Token("            ", 41, 0, "space"));
      collection_.push_back(Token("||", 41, 12, "oror"));
      collection_.push_back(Token(" ", 41, 14, "space"));
      collection_.push_back(Token("arg", 41, 15, "identifier"));
      collection_.push_back(Token(" ", 41, 18, "space"));
      collection_.push_back(Token("==", 41, 19, "equal"));
      collection_.push_back(Token(" ", 41, 21, "space"));
      collection_.push_back(Token("\"-nofail\"", 41, 22, "stringlit"));
      collection_.push_back(Token("\n", 41, 31, "newline"));
      collection_.push_back(Token("            ", 42, 0, "space"));
      collection_.push_back(Token("||", 42, 12, "oror"));
      collection_.push_back(Token(" ", 42, 14, "space"));
      collection_.push_back(Token("arg", 42, 15, "identifier"));
      collection_.push_back(Token(" ", 42, 18, "space"));
      collection_.push_back(Token("==", 42, 19, "equal"));
      collection_.push_back(Token(" ", 42, 21, "space"));
      collection_.push_back(Token("\"-nodup\"", 42, 22, "stringlit"));
      collection_.push_back(Token("\n", 42, 30, "newline"));
      collection_.push_back(Token("            ", 43, 0, "space"));
      collection_.push_back(Token("||", 43, 12, "oror"));
      collection_.push_back(Token(" ", 43, 14, "space"));
      collection_.push_back(Token("arg", 43, 15, "identifier"));
      collection_.push_back(Token(" ", 43, 18, "space"));
      collection_.push_back(Token("==", 43, 19, "equal"));
      collection_.push_back(Token(" ", 43, 21, "space"));
      collection_.push_back(Token("\"-showrules\"", 43, 22, "stringlit"));
      collection_.push_back(Token("\n", 43, 34, "newline"));
      collection_.push_back(Token("            ", 44, 0, "space"));
      collection_.push_back(Token("||", 44, 12, "oror"));
      collection_.push_back(Token(" ", 44, 14, "space"));
      collection_.push_back(Token("arg", 44, 15, "identifier"));
      collection_.push_back(Token(" ", 44, 18, "space"));
      collection_.push_back(Token("==", 44, 19, "equal"));
      collection_.push_back(Token(" ", 44, 21, "space"));
      collection_.push_back(Token("\"-xmlreport\"", 44, 22, "stringlit"));
      collection_.push_back(Token("\n", 44, 34, "newline"));
      collection_.push_back(Token("            ", 45, 0, "space"));
      collection_.push_back(Token("||", 45, 12, "oror"));
      collection_.push_back(Token(" ", 45, 14, "space"));
      collection_.push_back(Token("arg", 45, 15, "identifier"));
      collection_.push_back(Token(" ", 45, 18, "space"));
      collection_.push_back(Token("==", 45, 19, "equal"));
      collection_.push_back(Token(" ", 45, 21, "space"));
      collection_.push_back(Token("\"-vcformat\"", 45, 22, "stringlit"));
      collection_.push_back(Token("\n", 45, 33, "newline"));
      collection_.push_back(Token("            ", 46, 0, "space"));
      collection_.push_back(Token("||", 46, 12, "oror"));
      collection_.push_back(Token(" ", 46, 14, "space"));
      collection_.push_back(Token("arg", 46, 15, "identifier"));
      collection_.push_back(Token(" ", 46, 18, "space"));
      collection_.push_back(Token("==", 46, 19, "equal"));
      collection_.push_back(Token(" ", 46, 21, "space"));
      collection_.push_back(Token("\"-rule\"", 46, 22, "stringlit"));
      collection_.push_back(Token("\n", 46, 29, "newline"));
      collection_.push_back(Token("            ", 47, 0, "space"));
      collection_.push_back(Token("||", 47, 12, "oror"));
      collection_.push_back(Token(" ", 47, 14, "space"));
      collection_.push_back(Token("arg", 47, 15, "identifier"));
      collection_.push_back(Token(" ", 47, 18, "space"));
      collection_.push_back(Token("==", 47, 19, "equal"));
      collection_.push_back(Token(" ", 47, 21, "space"));
      collection_.push_back(Token("\"-profile\"", 47, 22, "stringlit"));
      collection_.push_back(Token("\n", 47, 32, "newline"));
      collection_.push_back(Token("            ", 48, 0, "space"));
      collection_.push_back(Token("||", 48, 12, "oror"));
      collection_.push_back(Token(" ", 48, 14, "space"));
      collection_.push_back(Token("arg", 48, 15, "identifier"));
      collection_.push_back(Token(" ", 48, 18, "space"));
      collection_.push_back(Token("==", 48, 19, "equal"));
      collection_.push_back(Token(" ", 48, 21, "space"));
      collection_.push_back(Token("\"-exclusions\"", 48, 22, "stringlit"));
      collection_.push_back(Token("\n", 48, 35, "newline"));
      collection_.push_back(Token("            ", 49, 0, "space"));
      collection_.push_back(Token("||", 49, 12, "oror"));
      collection_.push_back(Token(" ", 49, 14, "space"));
      collection_.push_back(Token("arg", 49, 15, "identifier"));
      collection_.push_back(Token(" ", 49, 18, "space"));
      collection_.push_back(Token("==", 49, 19, "equal"));
      collection_.push_back(Token(" ", 49, 21, "space"));
      collection_.push_back(Token("\"-param\"", 49, 22, "stringlit"));
      collection_.push_back(Token("\n", 49, 30, "newline"));
      collection_.push_back(Token("            ", 50, 0, "space"));
      collection_.push_back(Token("||", 50, 12, "oror"));
      collection_.push_back(Token(" ", 50, 14, "space"));
      collection_.push_back(Token("arg", 50, 15, "identifier"));
      collection_.push_back(Token(" ", 50, 18, "space"));
      collection_.push_back(Token("==", 50, 19, "equal"));
      collection_.push_back(Token(" ", 50, 21, "space"));
      collection_.push_back(Token("\"-paramfile\"", 50, 22, "stringlit"));
      collection_.push_back(Token("\n", 50, 34, "newline"));
      collection_.push_back(Token("            ", 51, 0, "space"));
      collection_.push_back(Token("||", 51, 12, "oror"));
      collection_.push_back(Token(" ", 51, 14, "space"));
      collection_.push_back(Token("arg", 51, 15, "identifier"));
      collection_.push_back(Token(" ", 51, 18, "space"));
      collection_.push_back(Token("==", 51, 19, "equal"));
      collection_.push_back(Token(" ", 51, 21, "space"));
      collection_.push_back(Token("\"-transform\"", 51, 22, "stringlit"));
      collection_.push_back(Token(")", 51, 34, "rightparen"));
      collection_.push_back(Token("\n", 51, 35, "newline"));
      collection_.push_back(Token("        ", 52, 0, "space"));
      collection_.push_back(Token("{", 52, 8, "leftbrace"));
      collection_.push_back(Token("\n", 52, 9, "newline"));
      collection_.push_back(Token("            ", 53, 0, "space"));
      collection_.push_back(Token("useLegacy", 53, 12, "identifier"));
      collection_.push_back(Token(" ", 53, 21, "space"));
      collection_.push_back(Token("=", 53, 22, "assign"));
      collection_.push_back(Token(" ", 53, 23, "space"));
      collection_.push_back(Token("true", 53, 24, "true"));
      collection_.push_back(Token(";", 53, 28, "semicolon"));
      collection_.push_back(Token("\n", 53, 29, "newline"));
      collection_.push_back(Token("            ", 54, 0, "space"));
      collection_.push_back(Token("break", 54, 12, "break"));
      collection_.push_back(Token(";", 54, 17, "semicolon"));
      collection_.push_back(Token("\n", 54, 18, "newline"));
      collection_.push_back(Token("        ", 55, 0, "space"));
      collection_.push_back(Token("}", 55, 8, "rightbrace"));
      collection_.push_back(Token("\n", 55, 9, "newline"));
      collection_.push_back(Token("        ", 56, 0, "space"));
      collection_.push_back(Token("++", 56, 8, "plusplus"));
      collection_.push_back(Token("i", 56, 10, "identifier"));
      collection_.push_back(Token(";", 56, 11, "semicolon"));
      collection_.push_back(Token("\n", 56, 12, "newline"));
      collection_.push_back(Token("    ", 57, 0, "space"));
      collection_.push_back(Token("}", 57, 4, "rightbrace"));
      collection_.push_back(Token("\n", 57, 5, "newline"));
      collection_.push_back(Token("    ", 58, 0, "space"));
      collection_.push_back(Token("// if legacy main fail, we silently pass to boost main in order to display\n", 58, 4, "cppcomment"));
      collection_.push_back(Token("    ", 59, 0, "space"));
      collection_.push_back(Token("// the new usage message\n", 59, 4, "cppcomment"));
      collection_.push_back(Token("    ", 60, 0, "space"));
      collection_.push_back(Token("if", 60, 4, "if"));
      collection_.push_back(Token(" ", 60, 6, "space"));
      collection_.push_back(Token("(", 60, 7, "leftparen"));
      collection_.push_back(Token("useLegacy", 60, 8, "identifier"));
      collection_.push_back(Token(" ", 60, 17, "space"));
      collection_.push_back(Token("&&", 60, 18, "andand"));
      collection_.push_back(Token(" ", 60, 20, "space"));
      collection_.push_back(Token("legacy_main", 60, 21, "identifier"));
      collection_.push_back(Token("(", 60, 32, "leftparen"));
      collection_.push_back(Token("argc", 60, 33, "identifier"));
      collection_.push_back(Token(",", 60, 37, "comma"));
      collection_.push_back(Token(" ", 60, 38, "space"));
      collection_.push_back(Token("argv", 60, 39, "identifier"));
      collection_.push_back(Token(",", 60, 43, "comma"));
      collection_.push_back(Token(" ", 60, 44, "space"));
      collection_.push_back(Token("true", 60, 45, "true"));
      collection_.push_back(Token(")", 60, 49, "rightparen"));
      collection_.push_back(Token(" ", 60, 50, "space"));
      collection_.push_back(Token("==", 60, 51, "equal"));
      collection_.push_back(Token(" ", 60, 53, "space"));
      collection_.push_back(Token("EXIT_SUCCESS", 60, 54, "identifier"));
      collection_.push_back(Token(")", 60, 66, "rightparen"));
      collection_.push_back(Token("\n", 60, 67, "newline"));
      collection_.push_back(Token("    ", 61, 0, "space"));
      collection_.push_back(Token("{", 61, 4, "leftbrace"));
      collection_.push_back(Token("\n", 61, 5, "newline"));
      collection_.push_back(Token("        ", 62, 0, "space"));
      collection_.push_back(Token("return", 62, 8, "return"));
      collection_.push_back(Token(" ", 62, 14, "space"));
      collection_.push_back(Token("EXIT_SUCCESS", 62, 15, "identifier"));
      collection_.push_back(Token(";", 62, 27, "semicolon"));
      collection_.push_back(Token("\n", 62, 28, "newline"));
      collection_.push_back(Token("    ", 63, 0, "space"));
      collection_.push_back(Token("}", 63, 4, "rightbrace"));
      collection_.push_back(Token("\n", 63, 5, "newline"));
      collection_.push_back(Token("    ", 64, 0, "space"));
      collection_.push_back(Token("return", 64, 4, "return"));
      collection_.push_back(Token(" ", 64, 10, "space"));
      collection_.push_back(Token("boost_main", 64, 11, "identifier"));
      collection_.push_back(Token("(", 64, 21, "leftparen"));
      collection_.push_back(Token("argc", 64, 22, "identifier"));
      collection_.push_back(Token(",", 64, 26, "comma"));
      collection_.push_back(Token(" ", 64, 27, "space"));
      collection_.push_back(Token("argv", 64, 28, "identifier"));
      collection_.push_back(Token(")", 64, 32, "rightparen"));
      collection_.push_back(Token(";", 64, 33, "semicolon"));
      collection_.push_back(Token("\n", 64, 34, "newline"));
      collection_.push_back(Token("}", 65, 0, "rightbrace"));
      collection_.push_back(Token("\n", 65, 1, "newline"));
    }

    /**
     * @brief It will be called after each test is run.
     */
    virtual void TearDown()
    {
    }

  protected:

    Tokens::TokenSequence collection_;
};

TEST_F(StatementsTest, getTokensOfStament_givenTokenCollectionAndTheStartingElement_returnStatementAssociated)
{
  //Arrange
  int offset = 206;
  int size = 7;
  Tokens::TokenSequence::const_iterator it = collection_.begin() + offset;
  Tokens::TokenSequence::const_iterator end = collection_.begin() + (offset+size);

  Token intitialToken("int", 34, 4, "int");

  //Act
  Statement response = Statements::getTokensOfStament(intitialToken, collection_);

  //Asserts
  EXPECT_EQ(size, response.tokenSequence_.size());
  ASSERT_TRUE(std::equal(it, end, response.tokenSequence_.begin()));
}

TEST_F(StatementsTest, getTokensOfStament_givenTheStartingElementInexistent_returnEmptyCollection)
{
  Token intitialToken("float", 0, 0, "int");

  //Act
  Statement response = Statements::getTokensOfStament(intitialToken, collection_);

  //Asserts
  EXPECT_EQ(0, response.tokenSequence_.size());
}

TEST_F(StatementsTest, getTokensOfStament_givenTheStartingElementDefineType_returnCollection)
{
  //Arrange
  int offset = 6;
  int size = 5;
  Tokens::TokenSequence::const_iterator it = collection_.begin() + offset;
  Tokens::TokenSequence::const_iterator end = collection_.begin() + (offset+size);
  Token intitialToken("#define", 7, 0, "pp_define");

  //Act
  Statement response = Statements::getTokensOfStament(intitialToken, collection_);
  std::cout<<it->name_ << " "<<response.tokenSequence_.size()<<std::endl;
  //Asserts
  EXPECT_EQ(size, response.tokenSequence_.size());
  ASSERT_TRUE(std::equal(it, end, response.tokenSequence_.begin()));
}
